#!/usr/bin/env python3
"""
Remote Database Setup Script for Jajuwa Healthcare PAC System
This script creates the necessary database tables and initial data for production deployment.
"""

import os
import sys
import mysql.connector
from mysql.connector import Error
from pathlib import Path
import json
import uuid
from datetime import datetime

def get_db_connection():
    """Get database connection from environment variables"""
    try:
        config = {
            'host': os.environ.get('MYSQL_HOST'),
            'user': os.environ.get('MYSQL_USER'),
            'password': os.environ.get('MYSQL_PASSWORD'),
            'database': os.environ.get('MYSQL_DATABASE'),
            'port': int(os.environ.get('MYSQL_PORT', '3306'))
        }
        
        # Validate required environment variables
        required_vars = ['MYSQL_HOST', 'MYSQL_USER', 'MYSQL_PASSWORD', 'MYSQL_DATABASE']
        missing_vars = [var for var in required_vars if not os.environ.get(var)]
        
        if missing_vars:
            print(f"❌ Missing required environment variables: {missing_vars}\")\n            print(\"Please set these variables in your Vercel dashboard or .env file\")\n            return None\n        \n        connection = mysql.connector.connect(**config)\n        if connection.is_connected():\n            print(f\"✅ Connected to MySQL database: {config['database']}\")\n            return connection\n        \n    except Error as e:\n        print(f\"❌ Error connecting to MySQL: {e}\")\n        return None\n\ndef create_tables(connection):\n    \"\"\"Create all necessary tables\"\"\"\n    cursor = connection.cursor()\n    \n    # Users table\n    users_table = \"\"\"\n    CREATE TABLE IF NOT EXISTS users (\n        id VARCHAR(36) PRIMARY KEY,\n        username VARCHAR(50) UNIQUE NOT NULL,\n        email VARCHAR(100) UNIQUE NOT NULL,\n        full_name VARCHAR(100) NOT NULL,\n        hashed_password VARCHAR(255) NOT NULL,\n        role ENUM('clinician', 'admin') NOT NULL,\n        is_active BOOLEAN DEFAULT TRUE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        last_login TIMESTAMP NULL,\n        INDEX idx_username (username),\n        INDEX idx_email (email),\n        INDEX idx_role (role)\n    );\n    \"\"\"\n    \n    # Patients table\n    patients_table = \"\"\"\n    CREATE TABLE IF NOT EXISTS patients (\n        id VARCHAR(36) PRIMARY KEY,\n        patient_id VARCHAR(50) UNIQUE NOT NULL,\n        first_name VARCHAR(100) NOT NULL,\n        last_name VARCHAR(100) NOT NULL,\n        date_of_birth DATE NOT NULL,\n        gender ENUM('Male', 'Female', 'Other') NOT NULL,\n        phone VARCHAR(20) NOT NULL,\n        email VARCHAR(100),\n        address TEXT NOT NULL,\n        medical_record_number VARCHAR(50) UNIQUE NOT NULL,\n        primary_physician VARCHAR(100) NOT NULL,\n        allergies JSON,\n        medications JSON,\n        medical_history JSON,\n        insurance_provider VARCHAR(100) NOT NULL,\n        insurance_policy_number VARCHAR(100) NOT NULL,\n        insurance_group_number VARCHAR(100),\n        consent_given BOOLEAN DEFAULT FALSE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        created_by VARCHAR(36) NOT NULL,\n        last_accessed TIMESTAMP NULL,\n        access_log JSON,\n        INDEX idx_patient_id (patient_id),\n        INDEX idx_mrn (medical_record_number),\n        INDEX idx_name (last_name, first_name),\n        INDEX idx_created_by (created_by),\n        FOREIGN KEY (created_by) REFERENCES users(id)\n    );\n    \"\"\"\n    \n    # Medical Images table\n    medical_images_table = \"\"\"\n    CREATE TABLE IF NOT EXISTS medical_images (\n        id VARCHAR(36) PRIMARY KEY,\n        patient_id VARCHAR(36) NOT NULL,\n        study_id VARCHAR(100) NOT NULL,\n        series_id VARCHAR(100) NOT NULL,\n        instance_id VARCHAR(36) NOT NULL,\n        modality ENUM('CT', 'MRI', 'X-Ray', 'Ultrasound', 'PET', 'Mammography', 'Nuclear Medicine') NOT NULL,\n        body_part VARCHAR(100) NOT NULL,\n        study_date DATE NOT NULL,\n        study_time TIME NOT NULL,\n        institution_name VARCHAR(200) NOT NULL,\n        referring_physician VARCHAR(100) NOT NULL,\n        dicom_metadata JSON,\n        image_data LONGTEXT NOT NULL,\n        thumbnail_data TEXT NOT NULL,\n        original_filename VARCHAR(255) NOT NULL,\n        file_size INT NOT NULL,\n        image_format VARCHAR(50) NOT NULL,\n        window_center FLOAT,\n        window_width FLOAT,\n        uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        uploaded_by VARCHAR(36) NOT NULL,\n        access_log JSON,\n        INDEX idx_patient_id (patient_id),\n        INDEX idx_study_id (study_id),\n        INDEX idx_series_id (series_id),\n        INDEX idx_modality (modality),\n        INDEX idx_body_part (body_part),\n        INDEX idx_study_date (study_date),\n        INDEX idx_uploaded_by (uploaded_by),\n        FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE CASCADE,\n        FOREIGN KEY (uploaded_by) REFERENCES users(id)\n    );\n    \"\"\"\n    \n    # Audit Logs table\n    audit_logs_table = \"\"\"\n    CREATE TABLE IF NOT EXISTS audit_logs (\n        id VARCHAR(36) PRIMARY KEY,\n        user_id VARCHAR(36) NOT NULL,\n        action ENUM('CREATE', 'READ', 'UPDATE', 'DELETE', 'UPLOAD', 'LOGIN', 'LOGOUT') NOT NULL,\n        resource_type ENUM('user', 'patient', 'medical_image', 'system') NOT NULL,\n        resource_id VARCHAR(36),\n        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        ip_address VARCHAR(45) NOT NULL,\n        user_agent TEXT,\n        details JSON,\n        INDEX idx_user_id (user_id),\n        INDEX idx_action (action),\n        INDEX idx_resource_type (resource_type),\n        INDEX idx_resource_id (resource_id),\n        INDEX idx_timestamp (timestamp),\n        FOREIGN KEY (user_id) REFERENCES users(id)\n    );\n    \"\"\"\n    \n    tables = [\n        (\"users\", users_table),\n        (\"patients\", patients_table),\n        (\"medical_images\", medical_images_table),\n        (\"audit_logs\", audit_logs_table)\n    ]\n    \n    for table_name, table_sql in tables:\n        try:\n            cursor.execute(table_sql)\n            print(f\"✅ Created/verified table: {table_name}\")\n        except Error as e:\n            print(f\"❌ Error creating table {table_name}: {e}\")\n            return False\n    \n    # Create additional indexes\n    indexes = [\n        \"CREATE INDEX IF NOT EXISTS idx_patients_search ON patients(first_name, last_name, patient_id, medical_record_number)\",\n        \"CREATE INDEX IF NOT EXISTS idx_images_study ON medical_images(patient_id, study_date, modality)\",\n        \"CREATE INDEX IF NOT EXISTS idx_audit_user_time ON audit_logs(user_id, timestamp)\"\n    ]\n    \n    for index_sql in indexes:\n        try:\n            cursor.execute(index_sql)\n        except Error as e:\n            print(f\"⚠️  Index creation warning: {e}\")\n    \n    connection.commit()\n    cursor.close()\n    return True\n\ndef create_default_users(connection):\n    \"\"\"Create default admin and clinician users\"\"\"\n    cursor = connection.cursor()\n    \n    # Password hash for \"password\" - should be changed in production\n    password_hash = \"$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj.A7J/7O2yW\"\n    \n    users = [\n        {\n            \"id\": str(uuid.uuid4()),\n            \"username\": \"admin\",\n            \"email\": \"admin@jajuwa.com\",\n            \"full_name\": \"Administrator\",\n            \"hashed_password\": password_hash,\n            \"role\": \"admin\"\n        },\n        {\n            \"id\": str(uuid.uuid4()),\n            \"username\": \"clinician\",\n            \"email\": \"doctor@jajuwa.com\",\n            \"full_name\": \"Dr. Smith\",\n            \"hashed_password\": password_hash,\n            \"role\": \"clinician\"\n        }\n    ]\n    \n    for user in users:\n        try:\n            cursor.execute(\"\"\"\n                INSERT IGNORE INTO users (id, username, email, full_name, hashed_password, role, created_at)\n                VALUES (%s, %s, %s, %s, %s, %s, NOW())\n            \"\"\", (\n                user[\"id\"], user[\"username\"], user[\"email\"], user[\"full_name\"],\n                user[\"hashed_password\"], user[\"role\"]\n            ))\n            \n            if cursor.rowcount > 0:\n                print(f\"✅ Created user: {user['username']} ({user['role']})\")\n            else:\n                print(f\"ℹ️  User already exists: {user['username']}\")\n                \n        except Error as e:\n            print(f\"❌ Error creating user {user['username']}: {e}\")\n    \n    connection.commit()\n    cursor.close()\n    \n    print(\"\\n🔑 Default Credentials:\")\n    print(\"Username: admin | Password: password\")\n    print(\"Username: clinician | Password: password\")\n    print(\"\\n⚠️  Please change these passwords in production!\")\n\ndef main():\n    \"\"\"Main setup function\"\"\"\n    print(\"🏥 Jajuwa Healthcare PAC System - Database Setup\")\n    print(\"=\" * 50)\n    \n    # Get database connection\n    connection = get_db_connection()\n    if not connection:\n        sys.exit(1)\n    \n    try:\n        # Create tables\n        print(\"\\n📋 Creating database tables...\")\n        if not create_tables(connection):\n            print(\"❌ Table creation failed\")\n            sys.exit(1)\n        \n        # Create default users\n        print(\"\\n👤 Creating default users...\")\n        create_default_users(connection)\n        \n        print(\"\\n🎉 Database setup completed successfully!\")\n        print(\"\\n📋 Next steps:\")\n        print(\"1. Change default passwords\")\n        print(\"2. Test the application\")\n        print(\"3. Set up regular backups\")\n        \n    except Exception as e:\n        print(f\"❌ Setup failed: {e}\")\n        sys.exit(1)\n    \n    finally:\n        if connection.is_connected():\n            connection.close()\n            print(\"\\n🔌 Database connection closed\")\n\nif __name__ == \"__main__\":\n    main()
